{"version":3,"sources":["login.js","chat.js","App.js","index.js"],"names":["withAuth0","useAuth0","isAuthenticated","loginWithRedirect","class","color","onClick","superagent","require","io","config","socket","connect","process","Chat","user","useState","message","state","setState","chat","setChat","gifArray","setGifArray","participants","setParticipants","rooms","setRooms","newRoom","setNewRoom","activeRoom","setActiveRoom","useEffect","on","payload","console","log","arr","type","rez","get","query","api_key","then","results","base","body","data","forEach","el","push","images","fixed_width","url","catch","error","emit","room","Data","set","handleAPICall","req","res","a","superagentResults","gamble","workable","switchRoom","e","selectedRoom","target","getAttribute","className","map","index","placeholder","onChange","value","alt","src","onChang","onKeyDown","key","ent","preventDefault","clickMe","App","props","info","this","auth0","nickname","React","Component","ReactDOM","render","domain","clientId","redirectUri","window","location","origin","document","getElementById"],"mappings":"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","file":"static/js/main.91f593f6.chunk.js","sourcesContent":["'user stricrt';\r\n\r\nimport React from 'react';\r\nimport { useAuth0, withAuth0 } from '@auth0/auth0-react';\r\n\r\n\r\nfunction LoginButton() {\r\n    const {isAuthenticated, loginWithRedirect} = useAuth0()\r\n\r\n    return !isAuthenticated &&(\r\n        <div class='login-box'>\r\n            <button color='red' onClick={loginWithRedirect}>\r\n            Login Here\r\n            </button>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default withAuth0(LoginButton);","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nconst superagent = require(\"superagent\");\r\nconst io = require(\"socket.io-client\");\r\nrequire(\"dotenv\").config();\r\nconst HOST = process.env.REACT_APP_HOST || \"http://localhost:3001\";\r\nconst socket = io.connect(`${HOST}/gifs`);\r\n\r\nlet Chat = ({ user }) => {\r\n  const [state, setState] = useState({ message: \"\", user: \"\" });\r\n  const [chat, setChat] = useState([]);\r\n  const [gifArray, setGifArray] = useState([]);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [rooms, setRooms] = useState([]);\r\n  const [newRoom, setNewRoom] = useState(\"\");\r\n  const [activeRoom, setActiveRoom] = useState(\"Main Room\");\r\n\r\n  const onChang = (e) => {\r\n    setState({ ...state, message: e.target.value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    //Notifies when user joines room\r\n    socket.on(\"user joined\", (payload) => {\r\n      console.log(payload);\r\n      setChat((arr) => [\r\n        ...arr,\r\n        {\r\n          type: \"notification\",\r\n          message: `User ${payload.user} has joined the room`,\r\n          user: payload.user,\r\n        },\r\n      ]);\r\n    });\r\n\r\n    //Receives list of participants from socket server\r\n    socket.on(\"get participants\", (payload) => {\r\n      setParticipants(payload.participants);\r\n    });\r\n\r\n    //Receives list of rooms\r\n    socket.on(\"get rooms\", (payload) => {\r\n      setRooms(payload.rooms);\r\n    });\r\n\r\n    //User has sent a message\r\n    socket.on(\"message\", (payload) => {\r\n      console.log(\"messaged\", payload);\r\n      //Updates the chat message list\r\n      setChat((arr) => [\r\n        ...arr,\r\n        { message: payload.message, user: payload.user },\r\n      ]);\r\n    });\r\n\r\n    //Once User logs in, updates state for current user\r\n    setState({ ...state, user });\r\n\r\n    //Notifies when user leaves a room\r\n    socket.on(\"user disconnected\", (payload) => {\r\n      console.log(payload);\r\n      setChat((arr) => [\r\n        ...arr,\r\n        {\r\n          type: \"notification\",\r\n          message: `User ${payload.user} has left the room`,\r\n          user: payload.user,\r\n        },\r\n      ]);\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Have user join main room after login\r\n  // load trending gifs to the gifArray\r\n  useEffect(() => {\r\n    if (state.user) {\r\n      let rez = [];\r\n      let url = `https://api.giphy.com/v1/gifs/trending?limit=5`;\r\n      superagent\r\n        .get(url)\r\n        .query({ api_key: `${process.env.REACT_APP_GIF_API}` })\r\n        .then(function (results) {\r\n          let base = results.body.data;\r\n          console.log(\"BAAAAASE: \", base);\r\n          base.forEach((el) => {\r\n            rez.push(el.images.fixed_width.url);\r\n          });\r\n\r\n          setGifArray((arr) => [...rez]);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(\"Womp Womp\", error);\r\n          // res.status(500).send('we messed up');\r\n        });\r\n      socket.emit(\"join\", { user: state.user, room: \"Main Room\" });\r\n    }\r\n  }, [state.user]);\r\n\r\n  // method to fetch Giphy API on chat input\r\n  const Data = { set: [] };\r\n  Data.handleAPICall = async (req, res) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${state.message}&limit=5`;\r\n    superagent\r\n      .get(url)\r\n      .query({ api_key: `${process.env.REACT_APP_GIF_API}` })\r\n      .then(function (superagentResults) {\r\n        Data.results = superagentResults;\r\n        let workable = Data.results.body.data;\r\n        workable.forEach((el) => {\r\n          Data.set.push(el.images.fixed_width.url);\r\n        });\r\n        setGifArray((arr) => [...Data.set]);\r\n        Data.set = [];\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Womp Womp\", error);\r\n      });\r\n  };\r\n\r\n  //\"translate\" API call to Giphy\r\n  const gamble = async (req, res) => {\r\n    const url = `https://api.giphy.com/v1/gifs/translate?s=${state.message}`;\r\n    superagent\r\n      .get(url)\r\n      .query({ api_key: `${process.env.REACT_APP_GIF_API}` })\r\n      .then(function (superagentResults) {\r\n        let workable = superagentResults.body.data;\r\n        socket.emit(\"message\", {\r\n          message: workable.images.fixed_width.url,\r\n          user: state.user,\r\n          room: activeRoom,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Womp Womp\");\r\n        // res.status(500).send('we messed up');\r\n      });\r\n  };\r\n\r\n  //method for images to send on click\r\n  const clickMe = (e) => {\r\n    e.preventDefault();\r\n    socket.emit(\"message\", {\r\n      message: e.target.src,\r\n      user: state.user,\r\n      room: activeRoom,\r\n    });\r\n  };\r\n\r\n  //function to render the gifs from api call\r\n  const gifWindow = (data) => {\r\n    console.log(\"Gif Window: \", data);\r\n    return data.map((el) => (\r\n      <div className=\"gif-prev\">\r\n        <img src={el} alt={el} onClick={(e) => clickMe(e)} />\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  //Displays the chat messages\r\n  const chatWindow = () => {\r\n    return chat.map(({ message, user, type }, index) =>\r\n      type === \"notification\" ? (\r\n        <div key={index}>\r\n          <h4>{message}</h4>\r\n        </div>\r\n      ) : (\r\n        <div key={index}>\r\n          <h2>\r\n            {user}: <img alt={index} src={message} />\r\n          </h2>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  //Displays the participants\r\n  const chatParticipants = () => {\r\n    return participants.map((user, index) => (\r\n      <div key={index}>\r\n        <h3>{user}</h3>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  //Displays the chat rooms\r\n  const chatRooms = () => {\r\n    return rooms.map((room, index) => (\r\n      <div key={index} onClick={switchRoom}>\r\n        <h3 room={room}>\r\n          {room} {room === activeRoom ? \" - active\" : \"\"}\r\n        </h3>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  //remove yourself from one room and add to another\r\n  const switchRoom = (e) => {\r\n    let selectedRoom = e.target.getAttribute(\"room\");\r\n    if (activeRoom !== selectedRoom) {\r\n      if (activeRoom) {\r\n        socket.emit(\"leave\", { user: state.user, room: activeRoom });\r\n      }\r\n\r\n      setChat([]);\r\n      socket.emit(\"join\", { user: state.user, room: selectedRoom });\r\n      setActiveRoom(selectedRoom);\r\n    }\r\n  };\r\n\r\n  //Users should be able to create own public rooms or private rooms to specific users\r\n  const joinRoom = () => {\r\n    setChat([]);\r\n    socket.emit(\"join\", { user: state.user, room: newRoom });\r\n    setActiveRoom(newRoom);\r\n  };\r\n\r\n  //leave room and update current room\r\n  const leaveRoom = () => {\r\n    socket.emit(\"leave\", { user: state.user, room: activeRoom });\r\n    setActiveRoom(\"\");\r\n  };\r\n\r\n  //I want to press enter to submit\r\n  const ent = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      Data.handleAPICall();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-container\">\r\n        <div className=\"side-nav\">\r\n          <div className=\"rooms\">\r\n            <h2>Chat Rooms</h2>\r\n            {rooms && <>{chatRooms()}</>}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Room Name\"\r\n              onChange={(e) => setNewRoom(e.target.value)}\r\n            />\r\n            <button onClick={joinRoom}>Create Room</button>\r\n            <button onClick={leaveRoom}>Leave Room</button>\r\n          </div>\r\n          <div className=\"participants\">\r\n            <h2>Chat Participants</h2>\r\n            {participants && <>{chatParticipants()}</>}\r\n          </div>\r\n        </div>\r\n        <div className=\"chat\">\r\n          <h2>Chat</h2>\r\n          <div className=\"chatArea\">{chatWindow()}</div>\r\n        </div>\r\n\r\n        <div className=\"searcher\">\r\n          <div className=\"search-side\">\r\n            <h2>Go Giff Yourself</h2>\r\n          </div>\r\n          <input\r\n            placeholder=\"Move Me\"\r\n            onChange={(e) => onChang(e)}\r\n            onKeyDown={(e) => ent(e)}\r\n            value={state.message}\r\n          ></input>\r\n          <button onClick={Data.handleAPICall}>Giph Me</button>\r\n          <button onClick={gamble}>Giph Me Harder</button>\r\n\r\n          <div className=\"gifTown\">{gifWindow(gifArray)}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import './App.css';\r\n\r\nimport Login from './login.js'\r\nimport Chat from './chat.js';\r\nimport { withAuth0 } from '@auth0/auth0-react';\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {}\r\n    }\r\n  }\r\n\r\n  userSetter(info) {\r\n    this.setState({ user: { info } })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        </header>\r\n        <body>\r\n          {!this.props.auth0.isAuthenticated\r\n            ? <Login />\r\n            : <Chat user={this.props.auth0.user.nickname} />}\r\n        </body>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withAuth0(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Auth0Provider } from '@auth0/auth0-react';\n\nconst DOMAIN = process.env.REACT_APP_DOMAIN;\nconst CID = process.env.REACT_APP_CLIENT_ID;\n\nReactDOM.render(\n  <Auth0Provider\n     domain= {DOMAIN}\n     clientId= {CID}\n     redirectUri={window.location.origin}\n >\n   <App />\n </Auth0Provider>,\ndocument.getElementById('root')\n);\n"],"sourceRoot":""}